//============================================================
//
//	タイム処理 [time.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "time.h"
#include "manager.h"

//************************************************************
//	親クラス [CTime] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CTime::CTime() :
	m_dwOldTime	(0),	// 前回の処理開始時刻
	m_dwCurTime	(0),	// 今回の処理開始時刻
	m_fTime		(0)		// 処理の経過時間
{

}

//============================================================
//	デストラクタ
//============================================================
CTime::~CTime()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CTime::Init(void)
{
	// メンバ変数を初期化
	m_dwOldTime	= timeGetTime();	// 前回の処理開始時刻
	m_dwCurTime	= timeGetTime();	// 今回の処理開始時刻
	m_fTime		= 0;				// 処理の経過時間

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CTime::Uninit(void)
{

}

//============================================================
//	更新処理
//============================================================
void CTime::Update(void)
{
	// 変数を宣言
	DWORD dwDiffTime = 0;	// 処理開始時刻の差分

	// 前フレームの開始時刻を保存
	m_dwOldTime = m_dwCurTime;

	// 現在時刻を開始時刻に保存
	m_dwCurTime = timeGetTime();

	// 処理開始時刻の差分を計算
	dwDiffTime = m_dwCurTime - m_dwOldTime;

	// 経過時間を計算
	m_fTime = dwDiffTime * 0.001f;
}

//============================================================
//	生成処理
//============================================================
CTime *CTime::Create(void)
{
	// タイムの生成
	CTime *pTime = new CTime;
	if (pTime == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// タイムの初期化
		if (FAILED(pTime->Init()))
		{ // 初期化に失敗した場合

			// タイムの破棄
			SAFE_DELETE(pTime);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pTime;
	}
}

//============================================================
//	破棄処理
//============================================================
void CTime::Release(CTime *&prTime)
{
	// タイムの終了
	assert(prTime != nullptr);
	prTime->Uninit();

	// メモリ開放
	SAFE_DELETE(prTime);
}
