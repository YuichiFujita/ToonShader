//============================================================
//
//	数字処理 [value.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "value.h"
#include "manager.h"
#include "renderer.h"
#include "texture.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char *TEXTURE_FILE[] =	// テクスチャファイル
	{
		"data\\TEXTURE\\number000.png",	// 通常テクスチャ
	};

	const int PRIORITY		= 5;	// 数字の優先順位
	const int PTRN_WIDTH	= 10;	// テクスチャの横の分割数
	const int PTRN_HEIGHT	= 1;	// テクスチャの縦の分割数
}

//************************************************************
//	スタティックアサート
//************************************************************
static_assert(NUM_ARRAY(TEXTURE_FILE) == CValue::TEXTURE_MAX, "ERROR : Texture Count Mismatch");

//************************************************************
//	子クラス [CValue] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CValue::CValue() : CAnim2D(CObject::LABEL_NONE, CObject::DIM_2D, PRIORITY), m_nNum(0)
{

}

//============================================================
//	デストラクタ
//============================================================
CValue::~CValue()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CValue::Init(void)
{
	// メンバ変数を初期化
	m_nNum = 0;	// 表示数値

	// アニメーション2Dの初期化
	if (FAILED(CAnim2D::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// テクスチャ横分割数の設定
	SetWidthPattern(PTRN_WIDTH);

	// テクスチャ縦分割数の設定
	SetHeightPattern(PTRN_HEIGHT);

	// アニメーションを停止
	SetEnableStop(true);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CValue::Uninit(void)
{
	// アニメーション2Dの終了
	CAnim2D::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CValue::Update(void)
{
	// アニメーション2Dの更新
	CAnim2D::Update();
}

//============================================================
//	描画処理
//============================================================
void CValue::Draw(void)
{
	// アニメーション2Dの描画
	CAnim2D::Draw();
}

//============================================================
//	生成処理
//============================================================
CValue *CValue::Create
(
	const ETexture texture,		// テクスチャ
	const D3DXVECTOR3& rPos,	// 位置
	const D3DXVECTOR3& rSize,	// 大きさ
	const D3DXVECTOR3& rRot,	// 向き
	const D3DXCOLOR& rCol		// 色
)
{
	// 数字の生成
	CValue *pValue = new CValue;
	if (pValue == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// 数字の初期化
		if (FAILED(pValue->Init()))
		{ // 初期化に失敗した場合

			// 数字の破棄
			SAFE_DELETE(pValue);
			return nullptr;
		}

		// テクスチャを設定
		pValue->SetTexture(texture);

		// 位置を設定
		pValue->SetVec3Position(rPos);

		// 向きを設定
		pValue->SetVec3Rotation(rRot);

		// 大きさを設定
		pValue->SetVec3Sizing(rSize);

		// 色を設定
		pValue->SetColor(rCol);

		// 確保したアドレスを返す
		return pValue;
	}
}

//============================================================
//	テクスチャの設定処理
//============================================================
void CValue::SetTexture(const ETexture texture)
{
	// テクスチャを登録・割当
	BindTexture(GET_MANAGER->GetTexture()->Regist(TEXTURE_FILE[texture]));
}

//============================================================
//	値の設定処理
//============================================================
void CValue::SetNumber(const int nNum)
{
	// 引数の値を代入
	m_nNum = nNum;

	// パターンの設定
	CAnim2D::SetPattern(m_nNum);
}
